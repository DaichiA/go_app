package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"database/sql"
	"fmt"
	"graphql/graph/model"

	_ "github.com/lib/pq"
)

// Breads is the resolver for the todos field.
func (r *queryResolver) Breads(ctx context.Context) ([]*model.Bread, error) {
	results, err := fetch_all()
	if err != nil {
		fmt.Println(err)
	}

	for results.Next() {
		var id string
		var name string
		var created_at string
		err := results.Scan(&id, &name, &created_at)
		if err != nil {
			fmt.Println(err)
		}
		
		bread := &model.Bread{
			ID:        id,
			Name:      name,
			CreatedAt: created_at,
		}
		r.breads = append(r.breads, bread)
	}

	return r.breads, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
func fetch_all() (*sql.Rows, error) {
	// DB接続
	// ローカルで動作確認するだけなので全てベタ書き
	db, err := sql.Open("postgres", "host=db user=postgres dbname=go_app password=mypassword sslmode=disable")
	defer db.Close()

	if err != nil {
		fmt.Println(err)
	}

	var rows *sql.Rows
	rows, err = db.Query("SELECT * FROM breads;")
	if err != nil {
		fmt.Println(err)
	}

	return rows, nil
}
